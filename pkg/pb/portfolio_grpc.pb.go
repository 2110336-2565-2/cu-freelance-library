// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: portfolio.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PortfolioServiceClient is the client API for PortfolioService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortfolioServiceClient interface {
	FindAllPortfolio(ctx context.Context, in *FindAllPortfolioRequest, opts ...grpc.CallOption) (*FindAllPortfolioResponse, error)
	FindOnePortfolio(ctx context.Context, in *FindOnePortfolioRequest, opts ...grpc.CallOption) (*FindOnePortfolioResponse, error)
	FindPortfolioByOwnerID(ctx context.Context, in *FindPortfolioByOwnerIDRequest, opts ...grpc.CallOption) (*FindPortfolioByOwnerIDResponse, error)
	CreatePortfolio(ctx context.Context, in *CreatePortfolioRequest, opts ...grpc.CallOption) (*CreatePortfolioResponse, error)
	UpdatePortfolio(ctx context.Context, in *UpdatePortfolioRequest, opts ...grpc.CallOption) (*UpdatePortfolioResponse, error)
	DeletePortfolio(ctx context.Context, in *DeletePortfolioRequest, opts ...grpc.CallOption) (*DeletePortfolioResponse, error)
}

type portfolioServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortfolioServiceClient(cc grpc.ClientConnInterface) PortfolioServiceClient {
	return &portfolioServiceClient{cc}
}

func (c *portfolioServiceClient) FindAllPortfolio(ctx context.Context, in *FindAllPortfolioRequest, opts ...grpc.CallOption) (*FindAllPortfolioResponse, error) {
	out := new(FindAllPortfolioResponse)
	err := c.cc.Invoke(ctx, "/portfolio.PortfolioService/FindAllPortfolio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) FindOnePortfolio(ctx context.Context, in *FindOnePortfolioRequest, opts ...grpc.CallOption) (*FindOnePortfolioResponse, error) {
	out := new(FindOnePortfolioResponse)
	err := c.cc.Invoke(ctx, "/portfolio.PortfolioService/FindOnePortfolio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) FindPortfolioByOwnerID(ctx context.Context, in *FindPortfolioByOwnerIDRequest, opts ...grpc.CallOption) (*FindPortfolioByOwnerIDResponse, error) {
	out := new(FindPortfolioByOwnerIDResponse)
	err := c.cc.Invoke(ctx, "/portfolio.PortfolioService/FindPortfolioByOwnerID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) CreatePortfolio(ctx context.Context, in *CreatePortfolioRequest, opts ...grpc.CallOption) (*CreatePortfolioResponse, error) {
	out := new(CreatePortfolioResponse)
	err := c.cc.Invoke(ctx, "/portfolio.PortfolioService/CreatePortfolio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) UpdatePortfolio(ctx context.Context, in *UpdatePortfolioRequest, opts ...grpc.CallOption) (*UpdatePortfolioResponse, error) {
	out := new(UpdatePortfolioResponse)
	err := c.cc.Invoke(ctx, "/portfolio.PortfolioService/UpdatePortfolio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) DeletePortfolio(ctx context.Context, in *DeletePortfolioRequest, opts ...grpc.CallOption) (*DeletePortfolioResponse, error) {
	out := new(DeletePortfolioResponse)
	err := c.cc.Invoke(ctx, "/portfolio.PortfolioService/DeletePortfolio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortfolioServiceServer is the server API for PortfolioService service.
// All implementations should embed UnimplementedPortfolioServiceServer
// for forward compatibility
type PortfolioServiceServer interface {
	FindAllPortfolio(context.Context, *FindAllPortfolioRequest) (*FindAllPortfolioResponse, error)
	FindOnePortfolio(context.Context, *FindOnePortfolioRequest) (*FindOnePortfolioResponse, error)
	FindPortfolioByOwnerID(context.Context, *FindPortfolioByOwnerIDRequest) (*FindPortfolioByOwnerIDResponse, error)
	CreatePortfolio(context.Context, *CreatePortfolioRequest) (*CreatePortfolioResponse, error)
	UpdatePortfolio(context.Context, *UpdatePortfolioRequest) (*UpdatePortfolioResponse, error)
	DeletePortfolio(context.Context, *DeletePortfolioRequest) (*DeletePortfolioResponse, error)
}

// UnimplementedPortfolioServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPortfolioServiceServer struct {
}

func (UnimplementedPortfolioServiceServer) FindAllPortfolio(context.Context, *FindAllPortfolioRequest) (*FindAllPortfolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllPortfolio not implemented")
}
func (UnimplementedPortfolioServiceServer) FindOnePortfolio(context.Context, *FindOnePortfolioRequest) (*FindOnePortfolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOnePortfolio not implemented")
}
func (UnimplementedPortfolioServiceServer) FindPortfolioByOwnerID(context.Context, *FindPortfolioByOwnerIDRequest) (*FindPortfolioByOwnerIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPortfolioByOwnerID not implemented")
}
func (UnimplementedPortfolioServiceServer) CreatePortfolio(context.Context, *CreatePortfolioRequest) (*CreatePortfolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePortfolio not implemented")
}
func (UnimplementedPortfolioServiceServer) UpdatePortfolio(context.Context, *UpdatePortfolioRequest) (*UpdatePortfolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePortfolio not implemented")
}
func (UnimplementedPortfolioServiceServer) DeletePortfolio(context.Context, *DeletePortfolioRequest) (*DeletePortfolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePortfolio not implemented")
}

// UnsafePortfolioServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortfolioServiceServer will
// result in compilation errors.
type UnsafePortfolioServiceServer interface {
	mustEmbedUnimplementedPortfolioServiceServer()
}

func RegisterPortfolioServiceServer(s grpc.ServiceRegistrar, srv PortfolioServiceServer) {
	s.RegisterService(&PortfolioService_ServiceDesc, srv)
}

func _PortfolioService_FindAllPortfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllPortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).FindAllPortfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portfolio.PortfolioService/FindAllPortfolio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).FindAllPortfolio(ctx, req.(*FindAllPortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_FindOnePortfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOnePortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).FindOnePortfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portfolio.PortfolioService/FindOnePortfolio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).FindOnePortfolio(ctx, req.(*FindOnePortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_FindPortfolioByOwnerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPortfolioByOwnerIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).FindPortfolioByOwnerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portfolio.PortfolioService/FindPortfolioByOwnerID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).FindPortfolioByOwnerID(ctx, req.(*FindPortfolioByOwnerIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_CreatePortfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).CreatePortfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portfolio.PortfolioService/CreatePortfolio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).CreatePortfolio(ctx, req.(*CreatePortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_UpdatePortfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).UpdatePortfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portfolio.PortfolioService/UpdatePortfolio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).UpdatePortfolio(ctx, req.(*UpdatePortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_DeletePortfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).DeletePortfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portfolio.PortfolioService/DeletePortfolio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).DeletePortfolio(ctx, req.(*DeletePortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PortfolioService_ServiceDesc is the grpc.ServiceDesc for PortfolioService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortfolioService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "portfolio.PortfolioService",
	HandlerType: (*PortfolioServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAllPortfolio",
			Handler:    _PortfolioService_FindAllPortfolio_Handler,
		},
		{
			MethodName: "FindOnePortfolio",
			Handler:    _PortfolioService_FindOnePortfolio_Handler,
		},
		{
			MethodName: "FindPortfolioByOwnerID",
			Handler:    _PortfolioService_FindPortfolioByOwnerID_Handler,
		},
		{
			MethodName: "CreatePortfolio",
			Handler:    _PortfolioService_CreatePortfolio_Handler,
		},
		{
			MethodName: "UpdatePortfolio",
			Handler:    _PortfolioService_UpdatePortfolio_Handler,
		},
		{
			MethodName: "DeletePortfolio",
			Handler:    _PortfolioService_DeletePortfolio_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "portfolio.proto",
}
