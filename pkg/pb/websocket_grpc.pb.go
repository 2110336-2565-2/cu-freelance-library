// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: websocket.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebsocketServiceClient is the client API for WebsocketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebsocketServiceClient interface {
	CreateWebsocketTicket(ctx context.Context, in *CreateWebsocketTicketRequest, opts ...grpc.CallOption) (*CreateWebsocketTicketResponse, error)
	VerifyWebsocketTicket(ctx context.Context, in *VerifyWebsocketTicketRequest, opts ...grpc.CallOption) (*VerifyWebsocketTicketResponse, error)
}

type websocketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebsocketServiceClient(cc grpc.ClientConnInterface) WebsocketServiceClient {
	return &websocketServiceClient{cc}
}

func (c *websocketServiceClient) CreateWebsocketTicket(ctx context.Context, in *CreateWebsocketTicketRequest, opts ...grpc.CallOption) (*CreateWebsocketTicketResponse, error) {
	out := new(CreateWebsocketTicketResponse)
	err := c.cc.Invoke(ctx, "/websocket.WebsocketService/CreateWebsocketTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketServiceClient) VerifyWebsocketTicket(ctx context.Context, in *VerifyWebsocketTicketRequest, opts ...grpc.CallOption) (*VerifyWebsocketTicketResponse, error) {
	out := new(VerifyWebsocketTicketResponse)
	err := c.cc.Invoke(ctx, "/websocket.WebsocketService/VerifyWebsocketTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebsocketServiceServer is the server API for WebsocketService service.
// All implementations should embed UnimplementedWebsocketServiceServer
// for forward compatibility
type WebsocketServiceServer interface {
	CreateWebsocketTicket(context.Context, *CreateWebsocketTicketRequest) (*CreateWebsocketTicketResponse, error)
	VerifyWebsocketTicket(context.Context, *VerifyWebsocketTicketRequest) (*VerifyWebsocketTicketResponse, error)
}

// UnimplementedWebsocketServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWebsocketServiceServer struct {
}

func (UnimplementedWebsocketServiceServer) CreateWebsocketTicket(context.Context, *CreateWebsocketTicketRequest) (*CreateWebsocketTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebsocketTicket not implemented")
}
func (UnimplementedWebsocketServiceServer) VerifyWebsocketTicket(context.Context, *VerifyWebsocketTicketRequest) (*VerifyWebsocketTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyWebsocketTicket not implemented")
}

// UnsafeWebsocketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebsocketServiceServer will
// result in compilation errors.
type UnsafeWebsocketServiceServer interface {
	mustEmbedUnimplementedWebsocketServiceServer()
}

func RegisterWebsocketServiceServer(s grpc.ServiceRegistrar, srv WebsocketServiceServer) {
	s.RegisterService(&WebsocketService_ServiceDesc, srv)
}

func _WebsocketService_CreateWebsocketTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebsocketTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServiceServer).CreateWebsocketTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/websocket.WebsocketService/CreateWebsocketTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServiceServer).CreateWebsocketTicket(ctx, req.(*CreateWebsocketTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsocketService_VerifyWebsocketTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyWebsocketTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServiceServer).VerifyWebsocketTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/websocket.WebsocketService/VerifyWebsocketTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServiceServer).VerifyWebsocketTicket(ctx, req.(*VerifyWebsocketTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebsocketService_ServiceDesc is the grpc.ServiceDesc for WebsocketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebsocketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "websocket.WebsocketService",
	HandlerType: (*WebsocketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWebsocketTicket",
			Handler:    _WebsocketService_CreateWebsocketTicket_Handler,
		},
		{
			MethodName: "VerifyWebsocketTicket",
			Handler:    _WebsocketService_VerifyWebsocketTicket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "websocket.proto",
}
